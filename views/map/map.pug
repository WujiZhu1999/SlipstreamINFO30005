extends ../navbar

block styles
	link(rel='stylesheet', href='/css/map_total.css')
	
//-
	div mapcontainer:
	for display map from google map api. When clickging on button which make a api call the actual thing will happen is call google map api in front end for map display and there will also triger startroute in backend if you choose to start which actually casue api call that store the route data the reason having nested container here is because google map api need the div(id = map) to be actually same 100% size as its container otherwise the map won't work

	div floating-panel:
	a bunch of button which share a same form with usage
	Start Route -> actually start route and you will go to the riding(bike navigation) page
	Save Route -> save the route you input in the origin/destination form
	deleteRoute -> this button is postioned in the form for convenience but actually its hidden
	so users can't click it. This button will be clicked via javascript below if someone choose to delete the route through the pannel and the panel button will click this button. This will make sure that the delete function sent to backend actually has corresponding route.
	Search Route -> this button cause the map to trigger some of the google map api front end that will display the route on the map without refreshing the page
	Saved -> transfer to down side of the page with saved route

	div routeinfo:
	the pannel for display route distance/time/turns which float on the map that will help people make better decision

	div saved route:
	the actual div for saved route/done through input origin and destination on the floating pannel above. And display them in the whole screen list

	the first script group is just for map route control when search
	the second script group is for google map api callback
	the third script is when you click the load data from saved route panel
	the fourth script is for delete data button linkage
block content
	
	div(id="floating-panel")
		div(id="magic")
			form(action="/Map/start" method="post")
				
				if(origin && origin!="---")
					input(type="text" id="_origin" name="_origin" required value = origin placeholder = "Origin")
				else
					input(type="text" id="_origin" name="_origin" required placeholder = "Origin")
				if(destination && destination!="---")
					input(type="text" id="_end" name="_end" required value = destination)
				else
					input(type="text" id="_end" name="_end" required placeholder = "Destination")
				br
				input(type="submit" value="Start Route" id = "bst")
				br
				input(type="submit" value="Save Route" formaction = "/Map/saveRoute" id = "bsa")
				input(type="submit" value="deleteRoute" id= "deleteSaved" formaction = "/Map/deleteRoute" style="display:none")

			input(type="submit" id="sub" value = "Search Route")
			button(type="submit" id="savedd" onclick="window.location.href='#savedRoute'") Saved
	div(id="mapcontainer")
		div(id="map")
	div(id="routeinfo")
		h1 Route Info
		p(id="route info") Distance
		p(id="route info2") Time
		p(id="route info3") Turns
	if(alertt)
		p(id="shout" styles="display:none") The route can't be find.
	//-
		div(id="savedRoute")
			if(route)
				ol(style=" list-style-type: none;")
					each r in route
						li(class= r["origin"] + r["destination"])
							p(class= r["origin"] + r["destination"]+"1") From #{r["origin"]}
							p(class= r["origin"] + r["destination"]+"2") To #{r["destination"]}
							p(class= r["origin"] + r["destination"]+"3") With #{(r["distance"] * 0.001).toFixed(3)} kms
							p(class= r["origin"] + r["destination"]+"4") About #{(r["duration"] * (1/60)).toFixed(3)} mins
							button(id = "O" class=r["origin"] + r["destination"] onclick="loadDATA(this)") O 
							button(class=r["origin"] + r["destination"] onclick="deleteRoute(this)") X
	script.
		if(document.getElementById("shout")){
			alert(document.getElementById("shout").innerHTML);
		}
		function initMap() {
			var directionsService = new google.maps.DirectionsService();
			var directionsRenderer = new google.maps.DirectionsRenderer();
			var map = new google.maps.Map(document.getElementById('map'), {
			zoom: 13,
			center: {lat: -37.8105, lng: 144.9624}
		});
			directionsRenderer.setMap(map);
			var onChangeHandler = function() {
				calculateAndDisplayRoute(directionsService, directionsRenderer);
			};
			document.getElementById('sub').addEventListener('click', function() {
				calculateAndDisplayRoute(directionsService, directionsRenderer);
			});
			if(document.getElementById('_origin').value && document.getElementById('_origin').value !='---' &&document.getElementById('_end').value && document.getElementById('_end').value !='---'){
				
				calculateAndDisplayRoute(directionsService, directionsRenderer);
			}
		}
		function calculateAndDisplayRoute(directionsService, directionsRenderer) {
		directionsService.route({
			origin: {query: document.getElementById('_origin').value},
			destination: {query: document.getElementById('_end').value},
			travelMode: 'BICYCLING'
		},
			function(response, status) {
				if (status === 'OK') {
					document.getElementById("route info").innerHTML = JSON.stringify((response["routes"][0]["legs"][0]["distance"]["value"]/1000).toFixed(3)) + " Kms"
					document.getElementById("route info2").innerHTML = JSON.stringify((response["routes"][0]["legs"][0]["duration"]['value']/60).toFixed(3)) + " Mins"
					var str = JSON.stringify(response["routes"][0]["legs"][0])
					directionsRenderer.setDirections(response);
					document.getElementById("route info3").innerHTML = (str.split("turn").length-1) + " Turns";

				} else {
					window.alert('Directions request failed due to ' + status);
				}
			});
		}
	script(async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB3bEc0lmQ6WNX_Cl98IRfu1E5DRLiG2pE&callback=initMap").
	script.
		function loadDATA(ele){
			document.getElementById("_origin").value = document.getElementsByClassName(ele.className+"1")[0].innerHTML.slice(5).trim();
			document.getElementById("_end").value = document.getElementsByClassName(ele.className+"2")[0].innerHTML.slice(3).trim();
			window.location.href = "#mapcontainer";
		}

		function deleteRoute(ele){
			document.getElementById("O").click();
			document.getElementById("deleteSaved").click();
		}