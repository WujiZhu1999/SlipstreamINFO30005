extends ../navbar
block styles
	link(rel='stylesheet', href='/css/map_total.css')

//-
	this is the page when you are actually riding
	div mapcontainer:
		the container for actual map. which will load the route for user. and will button set floating on top of the map pannel for control. HALT for halting route. End route means finish the route and route data will records to your personal records. View destination will give you the real time view of your destination to give user better understanding about the route. If the click the post which says view your destination then they will go back to map itself

		For hault route I actually defined a halt page with a cool pic on it. But considering if people hault then they are likey to in a situation where they want to start a new route right now which a hault page will waste their time so I just Through then back to map page where they could restart the route.

		THe other form/p for lat/lng are just place holder for lat/lng such that google map needs for street view
	div routecontroller:
		since the button above are attached to the form but if the user accidentally change the form will cause problem and also for eaiser formating so in this div contain the actual form and implementation
	script:
		first 2 are for route display, then the 2 are for street view display
block content
	div(id="mapcontainer").rideMap
		div(id="map")
		div(id="button_set")
			button(id="abort" onclick="document.getElementById('hr').click()").button Abort
			br
			button(id="finish" onclick="document.getElementById('er').click()").button Finish
			br
			button(id="street_view_trigger" onclick="window.location.href = '#streetView'").button View Destination
	
	div(id = "streetView")
		img(id="start_img" src = "../view.jpg" style="border:solid" onclick="window.location.href = '#mapcontainer' ")
		div(id="viewmap")
		div(id="pano")

	
	div(id = "routecontroller" style="display:none")
		form(action="/Map/halt" method="post" id = "hault")
			label(for="origin")
			input(type="text" id="origin" name="origin" value=route["origin"])
			label(for="end")
			input(type="text" id="destination" name="destination" value=route["destination"])
		input(id = "hr" type="submit" value="haultRoute" form = "hault")
		form(action="/Map/end" method="post" id = "end")
			label(for="origin")
			input(type="text" id="origin" name="origin" value=route["origin"])
			label(for="end")
			input(type="text" id="destination" name="destination" value=route["destination"])
		input(id = "er" type="submit" value="endRoute" form = "end")
	p(id="lat" style="display:none") #{route["response"]["routes"][0]["legs"][0]["end_location"]["lat"]}
	p(id="lng" style="display:none") #{route["response"]["routes"][0]["legs"][0]["end_location"]["lng"]}
	script.
			function initMap() {
				var directionsService = new google.maps.DirectionsService();
				var directionsRenderer = new google.maps.DirectionsRenderer();
				var map = new google.maps.Map(document.getElementById('map'), {
					zoom: 13,
					center: {lat: -37.8105, lng: 144.9624}
				});
				directionsRenderer.setMap(map);
				calculateAndDisplayRoute(directionsService, directionsRenderer);
				initialize();
			}
			function calculateAndDisplayRoute(directionsService, directionsRenderer) {
				directionsService.route({
					origin: {query: document.getElementById("origin").value},
					destination: {query: document.getElementById("destination").value},
					travelMode: 'BICYCLING'
				},
					function(response, status) {
						if (status === 'OK') {
							directionsRenderer.setDirections(response);
						} else {
							window.alert('Directions request failed due to ' + status);
						}
				});
			}
	script.
		function initialize(){
			var a_lat = parseFloat(document.getElementById("lat").innerHTML);
			var a_lng = parseFloat(document.getElementById("lng").innerHTML);
			var dest = {
				lat:a_lat,
				lng:a_lng
			};
			var map = new google.maps.Map(document.getElementById("viewmap"),{
				center: dest,
				zoom: 14
			});
			var panorama = new google.maps.StreetViewPanorama(
				document.getElementById("pano"),{
					position: dest,
					pov:{
						heading: 34,
						pitch: 10
					}
				}
			);
			map.setStreetView(panorama);
		}
	script(async defer src = "https://maps.googleapis.com/maps/api/js?key=AIzaSyB3bEc0lmQ6WNX_Cl98IRfu1E5DRLiG2pE&callback=initMap").
	script(type="text/javascript" src="https://www.gstatic.com/charts/loader.js").